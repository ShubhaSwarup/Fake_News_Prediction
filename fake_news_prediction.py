# -*- coding: utf-8 -*-
"""Fake_News_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RCp1ijmXsWajMFDvkorGmfEsByjosbKd
"""

! pip install kaggle

! mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""train.csv: A full training dataset with the following attributes:

id: unique id for a news article
title: the title of a news article
author: author of the news article
text: the text of the article; could be incomplete
label: a label that marks the article as potentially unreliable
1: unreliable
0: reliable
test.csv: A testing training dataset with all the same attributes at train.csv without the label.

submit.csv: A sample submission that you can
"""

!kaggle competitions download -c fake-news

#extracting the compressed dataset

from zipfile import ZipFile
dataset='/content/fake-news.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords
print(stopwords.words('english'))

"""DATA PRE PROCESSING"""

#loading the dataset to a pandas dataframe

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

#print the first five rows
news_dataset.head()

#counting the number of missing values in the dataset

news_dataset.isnull().sum()

#replacng null values with empty string

news_dataset = news_dataset.fillna('')

#merging the author name and news title
news_dataset['content'] = news_dataset['author'] + ' '+ news_dataset['title']

print(news_dataset['content'])

#seperating the data and label

X = news_dataset.drop(columns = 'label',axis = 1)
Y = news_dataset['label']

print(X)

print(Y)

"""Stemming:
stemming is a process of reducing a word to its root word
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content= re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#seperating the data and column

X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

#converting textual data to numerical data

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Splitting the dataset to traning and test data"""

X_train, X_test , Y_train , Y_test = train_test_split(X,Y,test_size = 0.2 ,stratify = Y,random_state=2)

"""Traning the model"""

model = LogisticRegression()

model.fit(X_train,Y_train)

"""Evaluation

accuracy score
"""

#accuracy score on the traning data

X_train_prediction = model.predict(X_train)
traning_data_accuracy = accuracy_score(X_train_prediction,Y_train )

print('accuracy score of the traning data:',traning_data_accuracy)

#accuracy score on the test data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('accuracy score of the test data:',test_data_accuracy)

"""Making a predictive System"""

X_new = X_test[200]
print(Y_test[200])

prediction= model.predict(X_new)
print(prediction)

if(prediction[0] == 0):
  print('The news is real')
else:
  print('The news is fake')

print(Y_test[3])

